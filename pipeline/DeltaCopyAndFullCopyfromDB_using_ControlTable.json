{
	"name": "DeltaCopyAndFullCopyfromDB_using_ControlTable",
	"properties": {
		"description": "Copy new or updated rows only from database using external control table",
		"activities": [
			{
				"name": "GetPartitionListWatermark",
				"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlSource",
						"sqlReaderQuery": {
							"value": "select PartitionID, SourceTableName, FilterQuery, DestinationContainer, concat(ProjectName,'/',SubjectArea,'/',SourceSystem,'/',SourceDatabase,'/',SourceSchemaName,'/',SourceTableName) as DestinationDirectory, GETDATE() as Timestamp from @{pipeline().parameters.Control_Table_Name} where SourceWaterMarkColumn IS NOT NULL",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlDatabaseExternal_ControlTable",
						"type": "DatasetReference",
						"parameters": {
							"TableName": {
								"value": "@pipeline().parameters.Control_Table_Name",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetPartitionListWatermark",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetPartitionListWatermark').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "LookupLastWaterMark",
							"description": "Retrieve the last high-watermark value stored in external control table",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlSource",
									"sqlReaderQuery": {
										"value": "select WatermarkValue from @{pipeline().parameters.Control_Table_Name}",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "AzureSqlDatabaseExternal_ControlTable2",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "LookupCurrentWaterMark",
							"description": "Retrieve  the current maximum value in watermark column of source data store",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "LookupSourceWaterMarkColumn",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlSource",
									"sqlReaderQuery": {
										"value": "@concat('select MAX(',activity('LookupSourceWaterMarkColumn').output.firstRow.SourceWaterMarkColumn,') as NewWatermarkValue from ',activity('LookupSourceWaterMarkColumn').output.firstRow.SchemaTable)",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "AzureSqlDatabaseDataSource1",
									"type": "DatasetReference"
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "DeltaCopyfromDB",
							"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "LookupCurrentWaterMark",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "LookupLastWaterMark",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlSource",
									"sqlReaderQuery": {
										"value": "select * from @{activity('LookupSourceWaterMarkColumn').output.firstRow.SchemaTable} where @{activity('LookupSourceWaterMarkColumn').output.firstRow.SourceWaterMarkColumn} > '@{activity('LookupLastWaterMark').output.firstRow.WatermarkValue}' and @{activity('LookupSourceWaterMarkColumn').output.firstRow.SourceWaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"dataIntegrationUnits": 0
							},
							"inputs": [
								{
									"referenceName": "AzureSqlDatabaseDataSource1",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "DataDestination",
									"type": "DatasetReference",
									"parameters": {
										"Data_Destination_Container": {
											"value": "@item().DestinationContainer",
											"type": "Expression"
										},
										"Data_Destination_Directory": {
											"value": "@item().DestinationDirectory",
											"type": "Expression"
										},
										"Data_Destination_Filename": {
											"value": "@item().SourceTableName",
											"type": "Expression"
										},
										"Data_Destination_Timestamp": {
											"value": "@item().Timestamp",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "UpdateWaterMark",
							"description": "Stored procedure activity to store the new high-watermark value into external control table for delta data loading. ",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "DeltaCopyfromDB",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[spUpdateWatermark]",
								"storedProcedureParameters": {
									"LastModifyDate": {
										"value": {
											"value": "@activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue",
											"type": "Expression"
										},
										"type": "datetime"
									},
									"PartitionID": {
										"value": {
											"value": "@activity('LookupSourceWaterMarkColumn').output.firstRow.PartitionID",
											"type": "Expression"
										},
										"type": "Int64"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureSqlDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "LookupSourceWaterMarkColumn",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "select * , SourceSchemaName+'.'+ SourceTableName as SchemaTable, ProjectName+'/'+SubjectArea+'/'+SourceSystem+'/'+SourceDatabase+'/'+SourceSchemaName+'/'+SourceTableName as DestinationDirectory, GETDATE() as Timestamp from @{pipeline().parameters.Control_Table_Name} where PartitionID = @{item().PartitionID}\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "AzureSqlDatabaseDataSource1",
									"type": "DatasetReference"
								}
							}
						}
					]
				}
			},
			{
				"name": "GetPartitionListWithNoWatermark",
				"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlSource",
						"sqlReaderQuery": {
							"value": "select PartitionID, SourceTableName, FilterQuery, DestinationContainer, concat(ProjectName,'/',SubjectArea,'/',SourceSystem,'/',SourceDatabase,'/',SourceSchemaName,'/',SourceTableName) as DestinationDirectory, GETDATE() as Timestamp from @{pipeline().parameters.Control_Table_Name} where SourceWaterMarkColumn IS NULL",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlDatabaseExternal_ControlTable",
						"type": "DatasetReference",
						"parameters": {
							"TableName": {
								"value": "@pipeline().parameters.Control_Table_Name",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEachPartition",
				"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetPartitionListWithNoWatermark",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetPartitionListWithNoWatermark').output.value",
						"type": "Expression"
					},
					"batchCount": 5,
					"activities": [
						{
							"name": "CopyOnePartition",
							"description": "Copy activity to copy each partition from source database store to destination store.",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@item().FilterQuery",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".csv"
									}
								},
								"enableStaging": false,
								"dataIntegrationUnits": 0
							},
							"inputs": [
								{
									"referenceName": "AzureSqlTableAdworksLT",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "DataDestination",
									"type": "DatasetReference",
									"parameters": {
										"Data_Destination_Container": {
											"value": "@item().DestinationContainer",
											"type": "Expression"
										},
										"Data_Destination_Directory": {
											"value": "@item().DestinationDirectory",
											"type": "Expression"
										},
										"Data_Destination_Filename": {
											"value": "@item().SourceTableName",
											"type": "Expression"
										},
										"Data_Destination_Timestamp": {
											"value": "@item().Timestamp",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "CopyControlTableToADLS",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "ForEachPartition",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select * from @{pipeline().parameters.Control_Table_Name}",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".csv"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "AzureSqlDatabaseExternal_ControlTable",
						"type": "DatasetReference",
						"parameters": {
							"TableName": {
								"value": "@pipeline().parameters.Control_Table_Name",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DelimitedTextControlTable",
						"type": "DatasetReference",
						"parameters": {
							"Control_Table_Name": {
								"value": "@pipeline().parameters.Control_Table_Name",
								"type": "Expression"
							}
						}
					}
				]
			}
		],
		"parameters": {
			"Control_Table_Name": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2021-08-03T17:12:12Z"
	}
}